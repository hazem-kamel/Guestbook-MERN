{"ast":null,"code":"import * as React from 'react';\nimport { isValidElement, createContext, useContext, createElement, useState as useState$2, useRef as useRef$2, useEffect as useEffect$2, cloneElement, Fragment } from 'react';\n\nvar isUndefined = val => val === undefined;\n\nvar isNullOrUndefined = value => value === null || isUndefined(value);\n\nvar isArray = value => Array.isArray(value);\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = value => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nconst VALUE = 'value';\nconst UNDEFINED = 'undefined';\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({\n  field,\n  handleChange,\n  isRadioOrCheckbox\n}) {\n  const {\n    ref\n  } = field;\n\n  if (isHTMLElement(ref) && ref.addEventListener && handleChange) {\n    ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isKey = value => !isArray(value) && (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = string => {\n  const result = [];\n  string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\n    result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : !isNaN(tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = data => Object.entries(data).reduce((previous, [key, value]) => {\n  if (!isKey(key)) {\n    set(previous, key, value);\n    return previous;\n  }\n\n  return Object.assign(Object.assign({}, previous), {\n    [key]: value\n  });\n}, {});\n\nvar get = (obj, path, defaultValue) => {\n  const result = path.split(/[,[\\].]+?/).filter(Boolean).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? obj[path] || defaultValue : result;\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar isRadioInput = element => !!element && element.type === 'radio';\n\nvar isCheckBoxInput = element => !!element && element.type === 'checkbox';\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\nfunction baseGet(object, path) {\n  const updatePath = isKey(path) ? [path] : castPath(path);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return index == length ? object : undefined;\n}\n\nfunction baseSlice(array, start, end) {\n  let index = -1;\n  let length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n\n  end = end > length ? length : end;\n\n  if (end < 0) {\n    end += length;\n  }\n\n  length = start > end ? 0 : end - start;\n  const result = Array(length);\n\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n\n  return result;\n}\n\nfunction parent(object, path) {\n  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nfunction baseUnset(object, path) {\n  const updatePath = isKey(path) ? [path] : castPath(path);\n  const childObject = parent(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  const result = !(childObject != null) || delete childObject[key];\n  let previousObjRef = undefined;\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index) {\n        if (isObject(objectRef) && isEmptyObject(objectRef)) {\n          previousObjRef ? delete previousObjRef[item] : delete object[item];\n        } else if (isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data)).length) {\n          if (previousObjRef) {\n            delete previousObjRef[item];\n          }\n        }\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return result;\n}\n\nfunction unset(object, paths) {\n  paths.forEach(path => {\n    baseUnset(object, path);\n  });\n  return object;\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\n  if (!field) {\n    return;\n  }\n\n  const {\n    ref,\n    ref: {\n      name,\n      type\n    },\n    mutationWatcher\n  } = field;\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  const fieldValue = fields[name];\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\n    const {\n      options\n    } = fieldValue;\n\n    if (isArray(options) && options.length) {\n      options.filter(Boolean).forEach(({\n        ref,\n        mutationWatcher\n      }, index) => {\n        if (ref && isDetached(ref) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, [`[${index}]`]);\n        }\n      });\n\n      if (options && !options.filter(Boolean).length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nconst defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = options => isArray(options) ? options.filter(Boolean).reduce((previous, {\n  ref: {\n    checked,\n    value\n  }\n}) => checked ? {\n  isValid: true,\n  value\n} : previous, defaultReturn) : defaultReturn;\n\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\n\nvar isFileInput = element => !!element && element.type === 'file';\n\nvar isMultipleSelect = element => !!element && element.type === 'select-multiple';\n\nvar isEmptyString = value => value === '';\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(({\n        ref: {\n          checked\n        }\n      }) => checked).map(({\n        ref: {\n          value\n        }\n      }) => value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    const {\n      checked,\n      value,\n      attributes\n    } = options[0].ref;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  const {\n    name,\n    value\n  } = ref;\n  const field = fields[name];\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar isString = value => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\n  const output = {};\n  const isSearchString = isString(search);\n  const isSearchArray = isArray(search);\n  const isNest = search && search.nest;\n\n  for (const name in fields) {\n    if (isUndefined(search) || isNest || isSearchString && name.startsWith(search) || isSearchArray && search.find(data => name.startsWith(data))) {\n      output[name] = getFieldValue(fields, fields[name].ref);\n    }\n  }\n\n  return output;\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => {\n  const objectAData = Object.entries(objectA);\n  const objectBData = Object.keys(objectB);\n  return objectAData.length === objectBData.length && objectAData.reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true);\n};\n\nvar isSameError = (error, {\n  type,\n  types,\n  message\n}) => {\n  return isObject(error) && error.type === type && error.message === message && compareObject(error.types, types);\n};\n\nfunction shouldUpdateWithError({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation\n}) {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n\nvar isRegex = value => value instanceof RegExp;\n\nvar getValueAndMessage = validationData => {\n  const isValueMessage = value => isObject(value) && !isRegex(value);\n\n  return isValueMessage(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar isBoolean = value => typeof value === 'boolean';\n\nvar isMessage = value => isString(value) || isObject(value) && isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n  if (isMessage(result) || isBoolean(result) && !result) {\n    const message = isMessage(result) ? result : '';\n    return {\n      type,\n      message,\n      ref\n    };\n  }\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\n  if (!validateAllFieldCriteria) {\n    return {};\n  }\n\n  const error = errors[name];\n  return Object.assign(Object.assign({}, error), {\n    types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), {\n      [type]: message || true\n    })\n  });\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, {\n  ref,\n  ref: {\n    type,\n    value,\n    name\n  },\n  options,\n  required,\n  maxLength,\n  minLength,\n  min,\n  max,\n  pattern,\n  validate\n}) => {\n  const fields = fieldsRef.current;\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n\n    if (!validateAllFieldCriteria) {\n      return error;\n    }\n  };\n\n  if (required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid)) {\n    const {\n      value: requiredValue,\n      message: requiredMessage\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const {\n      value: maxValue,\n      message: maxMessage\n    } = getValueAndMessage(max);\n    const {\n      value: minValue,\n      message: minMessage\n    } = getValueAndMessage(min);\n\n    if (type === 'number' || !type && !isNaN(value)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(value);\n\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(value);\n\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const {\n      value: patternValue,\n      message: patternMessage\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldValue(fields, ref);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(validateResult, validateRef, key);\n\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: validateRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner) ? error.inner.reduce((previous, {\n  path,\n  message,\n  type\n}) => Object.assign(Object.assign({}, previous), previous[path] && validateAllFieldCriteria ? {\n  [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message)\n} : {\n  [path]: previous[path] || Object.assign({\n    message,\n    type\n  }, validateAllFieldCriteria ? {\n    types: {\n      [type]: message || true\n    }\n  } : {})\n}), {}) : {\n  [error.path]: {\n    message: error.message,\n    type: error.type\n  }\n};\n\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\n  if (validationResolver) {\n    return validationResolver(data, context);\n  }\n\n  try {\n    return {\n      values: await validationSchema.validate(data, {\n        abortEarly: false,\n        context\n      }),\n      errors: {}\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria))\n    };\n  }\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name]) ? get(defaultValues, name, defaultValue) : defaultValues[name];\n\nfunction flatArray(list) {\n  return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\n  const getInnerPath = (value, key, isObject) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values) ? values.map((value, key) => getInnerPath(value, key)) : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\n};\n\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\n  let value;\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n    watchFields.add(fieldName);\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(name => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value) ? isObject(combinedDefaultValues) ? getDefaultValue(combinedDefaultValues, fieldName) : combinedDefaultValues : value;\n};\n\nvar skipValidation = ({\n  isOnChange,\n  hasError,\n  isBlurEvent,\n  isOnSubmit,\n  isReValidateOnSubmit,\n  isOnBlur,\n  isReValidateOnBlur,\n  isSubmitted\n}) => isOnChange && isBlurEvent || isOnSubmit && isReValidateOnSubmit || isOnSubmit && !isSubmitted || isOnBlur && !isBlurEvent && !hasError || isReValidateOnBlur && !isBlurEvent && hasError || isReValidateOnSubmit && isSubmitted;\n\nvar getFieldValueByName = (fields, name) => {\n  const results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\n  let isMatch = false;\n\n  if (!isArray(referenceArray) || !isArray(differenceArray) || referenceArray.length !== differenceArray.length) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    if (isMatch) {\n      break;\n    }\n\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (isUndefined(dataB) || Object.keys(dataA).length !== Object.keys(dataB).length) {\n      isMatch = true;\n      break;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        isMatch = true;\n        break;\n      }\n    }\n  }\n\n  return isMatch;\n}\n\nconst isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\n\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => isMatchFieldArrayName(name, current) ? true : prev, false);\n\nvar isFileListObject = data => typeof FileList !== UNDEFINED && data instanceof FileList;\n\nfunction onDomRemove(element, onDetachCallback) {\n  const observer = new MutationObserver(() => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nvar modeChecker = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange\n});\n\nconst {\n  useRef,\n  useState,\n  useCallback,\n  useEffect\n} = React;\n\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  validationSchema,\n  validationResolver,\n  validationContext,\n  defaultValues = {},\n  submitFocusError = true,\n  validateCriteriaMode\n} = {}) {\n  const fieldsRef = useRef({});\n  const validateAllFieldCriteria = validateCriteriaMode === 'all';\n  const errorsRef = useRef({});\n  const touchedFieldsRef = useRef({});\n  const fieldArrayDefaultValues = useRef({});\n  const watchFieldsRef = useRef(new Set());\n  const dirtyFieldsRef = useRef(new Set());\n  const fieldsWithValidationRef = useRef(new Set());\n  const validFieldsRef = useRef(new Set());\n  const isValidRef = useRef(true);\n  const defaultRenderValuesRef = useRef({});\n  const defaultValuesRef = useRef(defaultValues);\n  const isUnMount = useRef(false);\n  const isWatchAllRef = useRef(false);\n  const isSubmittedRef = useRef(false);\n  const isDirtyRef = useRef(false);\n  const submitCountRef = useRef(0);\n  const isSubmittingRef = useRef(false);\n  const handleChangeRef = useRef();\n  const resetFieldArrayFunctionRef = useRef({});\n  const validationContextRef = useRef(validationContext);\n  const fieldArrayNamesRef = useRef(new Set());\n  const [, render] = useState();\n  const {\n    isOnBlur,\n    isOnSubmit,\n    isOnChange\n  } = useRef(modeChecker(mode)).current;\n  const isWindowUndefined = typeof window === UNDEFINED;\n  const shouldValidateCallback = !!(validationSchema || validationResolver);\n  const isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  const isProxyEnabled = isWeb && 'Proxy' in window;\n  const readFormStateRef = useRef({\n    dirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnSubmit: isReValidateOnSubmit\n  } = useRef(modeChecker(reValidateMode)).current;\n  const reRender = useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n  const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\n    let shouldReRender = shouldRender || shouldUpdateWithError({\n      errors: errorsRef.current,\n      error,\n      name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || shouldValidateCallback) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || get(errorsRef.current, name);\n      }\n\n      errorsRef.current = unset(errorsRef.current, [name]);\n    } else {\n      validFieldsRef.current.delete(name);\n      shouldReRender = shouldReRender || !get(errorsRef.current, name);\n      set(errorsRef.current, name, error[name]);\n    }\n\n    if (shouldReRender && !skipReRender) {\n      reRender();\n      return true;\n    }\n  }, [reRender, shouldValidateCallback]);\n  const setFieldValue = useCallback((field, rawValue) => {\n    const ref = field.ref;\n    const options = field.options;\n    const {\n      type\n    } = ref;\n    const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(ref) && options) {\n      options.forEach(({\n        ref: radioRef\n      }) => radioRef.checked = radioRef.value === value);\n    } else if (isFileInput(ref)) {\n      if (isEmptyString(value) || isFileListObject(value)) {\n        ref.files = value;\n      } else {\n        ref.value = value;\n      }\n    } else if (isMultipleSelect(ref)) {\n      [...ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(({\n        ref: checkboxRef\n      }) => checkboxRef.checked = value.includes(checkboxRef.value)) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n\n    return !!type;\n  }, [isWeb]);\n\n  const setDirty = name => {\n    if (!fieldsRef.current[name] || !readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields) {\n      return false;\n    }\n\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\n    let isDirty = defaultRenderValuesRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n\n    if (isFieldArray) {\n      const fieldArrayName = name.substring(0, name.indexOf('['));\n      isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\n    }\n\n    const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !== isDirty;\n\n    if (isDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\n    return readFormStateRef.current.dirty ? isDirtyChanged : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\n  };\n\n  const setDirtyAndTouchedFields = useCallback(fieldName => {\n    if (setDirty(fieldName) || !get(touchedFieldsRef.current, fieldName) && readFormStateRef.current.touched) {\n      return !!set(touchedFieldsRef.current, fieldName, true);\n    }\n  }, []);\n  const setInternalValueBatch = useCallback((name, value, parentFieldName) => {\n    const isValueArray = isArray(value);\n\n    for (const key in value) {\n      const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\n\n      if (isObject(value[key])) {\n        setInternalValueBatch(name, value[key], fieldName);\n      }\n\n      const field = fieldsRef.current[fieldName];\n\n      if (field) {\n        setFieldValue(field, value[key]);\n        setDirtyAndTouchedFields(fieldName);\n      }\n    }\n  }, [setFieldValue, setDirtyAndTouchedFields]);\n  const setInternalValue = useCallback((name, value) => {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      setFieldValue(field, value);\n      const output = setDirtyAndTouchedFields(name);\n\n      if (isBoolean(output)) {\n        return output;\n      }\n    } else if (!isPrimitive(value)) {\n      setInternalValueBatch(name, value);\n    }\n  }, [setDirtyAndTouchedFields, setFieldValue, setInternalValueBatch]);\n  const executeValidation = useCallback(async (name, skipReRender) => {\n    const field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    shouldRenderBaseOnError(name, error, false, skipReRender);\n    return isEmptyObject(error);\n  }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\n  const executeSchemaValidation = useCallback(async payload => {\n    const {\n      errors\n    } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\n    const previousFormIsValid = isValidRef.current;\n    isValidRef.current = isEmptyObject(errors);\n\n    if (isArray(payload)) {\n      payload.forEach(name => {\n        const error = get(errors, name);\n\n        if (error) {\n          set(errorsRef.current, name, error);\n        } else {\n          unset(errorsRef.current, [name]);\n        }\n      });\n      reRender();\n    } else {\n      shouldRenderBaseOnError(payload, get(errors, payload) ? {\n        [payload]: get(errors, payload)\n      } : {}, previousFormIsValid !== isValidRef.current);\n    }\n\n    return isEmptyObject(errorsRef.current);\n  }, [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, validationResolver, validationSchema]);\n  const triggerValidation = useCallback(async payload => {\n    const fields = payload || Object.keys(fieldsRef.current);\n\n    if (shouldValidateCallback) {\n      return executeSchemaValidation(fields);\n    }\n\n    if (isArray(fields)) {\n      const result = await Promise.all(fields.map(async data => await executeValidation(data, true)));\n      reRender();\n      return result.every(Boolean);\n    }\n\n    return await executeValidation(fields);\n  }, [executeSchemaValidation, executeValidation, reRender, shouldValidateCallback]);\n\n  const isFieldWatched = name => isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  function setValue(names, valueOrShouldValidate, shouldValidate) {\n    let shouldRender = false;\n    const isMultiple = isArray(names);\n    (isMultiple ? names : [names]).forEach(name => {\n      const isStringFieldName = isString(name);\n      shouldRender = setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName ? valueOrShouldValidate : Object.values(name)[0]) || isMultiple ? true : isFieldWatched(name);\n    });\n\n    if (shouldRender || isMultiple) {\n      reRender();\n    }\n\n    if (shouldValidate || isMultiple && valueOrShouldValidate) {\n      triggerValidation(isMultiple ? undefined : names);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : async ({\n    type,\n    target\n  }) => {\n    const name = target ? target.name : '';\n    const fields = fieldsRef.current;\n    const errors = errorsRef.current;\n    const field = fields[name];\n    const currentError = get(errors, name);\n    let error;\n\n    if (!field) {\n      return;\n    }\n\n    const isBlurEvent = type === EVENTS.BLUR;\n    const shouldSkipValidation = skipValidation({\n      hasError: !!currentError,\n      isOnChange,\n      isBlurEvent,\n      isOnSubmit,\n      isReValidateOnSubmit,\n      isOnBlur,\n      isReValidateOnBlur,\n      isSubmitted: isSubmittedRef.current\n    });\n    const shouldUpdateDirty = setDirty(name);\n    let shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;\n\n    if (isBlurEvent && !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n      set(touchedFieldsRef.current, name, true);\n      shouldUpdateState = true;\n    }\n\n    if (shouldSkipValidation) {\n      return shouldUpdateState && reRender();\n    }\n\n    if (shouldValidateCallback) {\n      const {\n        errors\n      } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n      error = get(errors, name) ? {\n        [name]: get(errors, name)\n      } : {};\n\n      if (previousFormIsValid !== isValidRef.current) {\n        shouldUpdateState = true;\n      }\n    } else {\n      error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    }\n\n    if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\n      reRender();\n    }\n  };\n  const validateSchemaIsValid = useCallback((values = {}) => {\n    const fieldValues = isEmptyObject(defaultValuesRef.current) ? getFieldsValues(fieldsRef.current) : defaultValuesRef.current;\n    validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({\n      errors\n    }) => {\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [reRender, validateAllFieldCriteria, validationResolver]);\n\n  const removeFieldEventListener = (field, forceDelete) => {\n    if (!isUndefined(handleChangeRef.current) && field) {\n      findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\n    }\n  };\n\n  const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\n    if (!field || field && isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) && !forceDelete) {\n      return;\n    }\n\n    removeFieldEventListener(field, forceDelete);\n    const {\n      name\n    } = field.ref;\n    errorsRef.current = unset(errorsRef.current, [name]);\n    touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\n    defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [name]);\n    [dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(data => data.current.delete(name));\n\n    if (readFormStateRef.current.isValid || readFormStateRef.current.touched) {\n      reRender();\n\n      if (shouldValidateCallback) {\n        validateSchemaIsValid();\n      }\n    }\n  }, [reRender, shouldValidateCallback, validateSchemaIsValid]);\n\n  function clearError(name) {\n    if (isUndefined(name)) {\n      errorsRef.current = {};\n    } else {\n      unset(errorsRef.current, isArray(name) ? name : [name]);\n    }\n\n    reRender();\n  }\n\n  const setInternalError = ({\n    name,\n    type,\n    types,\n    message,\n    preventRender\n  }) => {\n    const field = fieldsRef.current[name];\n\n    if (!isSameError(errorsRef.current[name], {\n      type,\n      message,\n      types\n    })) {\n      set(errorsRef.current, name, {\n        type,\n        types,\n        message,\n        ref: field ? field.ref : {},\n        isManual: true\n      });\n\n      if (!preventRender) {\n        reRender();\n      }\n    }\n  };\n\n  function setError(name, type = '', message) {\n    if (isString(name)) {\n      setInternalError(Object.assign({\n        name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type,\n        message\n      }));\n    } else if (isArray(name)) {\n      name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), {\n        preventRender: true\n      })));\n      reRender();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    const combinedDefaultValues = isDirtyRef.current ? {} : isUndefined(defaultValue) ? isUndefined(defaultValuesRef.current) ? {} : defaultValuesRef.current : defaultValue;\n    const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\n    const watchFields = watchFieldsRef.current;\n\n    if (!isEmptyObject(combinedDefaultValues)) {\n      readFormStateRef.current.dirty = true;\n    }\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce((previous, name) => Object.assign(Object.assign({}, previous), {\n        [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues)\n      }), {});\n    }\n\n    isWatchAllRef.current = true;\n    const result = !isEmptyObject(fieldValues) && fieldValues || combinedDefaultValues;\n    return fieldNames && fieldNames.nest ? transformToNestObject(result) : result;\n  }\n\n  function unregister(names) {\n    if (!isEmptyObject(fieldsRef.current)) {\n      (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\n    }\n  }\n\n  function registerFieldsRef(ref, validateOptions = {}) {\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    const {\n      name,\n      type,\n      value\n    } = ref;\n    const fieldAttributes = Object.assign({\n      ref\n    }, validateOptions);\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioInput(ref) || isCheckBoxInput(ref);\n    let currentField = fields[name];\n    let isEmptyDefaultValue = true;\n    let isFieldArray = false;\n    let defaultValue;\n\n    if (isRadioOrCheckbox ? currentField && isArray(currentField.options) && currentField.options.filter(Boolean).find(({\n      ref\n    }) => value === ref.value) : currentField) {\n      fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\n      currentField = isRadioOrCheckbox ? Object.assign({\n        options: [...(currentField && currentField.options || []), {\n          ref,\n          mutationWatcher\n        }],\n        ref: {\n          type,\n          name\n        }\n      }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), {\n        mutationWatcher\n      });\n    } else {\n      currentField = fieldAttributes;\n    }\n\n    fields[name] = currentField;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      defaultValue = getDefaultValue(defaultValuesRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(currentField, defaultValue);\n      }\n    }\n\n    if (shouldValidateCallback && !isFieldArray && readFormStateRef.current.isValid) {\n      validateSchemaIsValid();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {\n          const previousFormIsValid = isValidRef.current;\n\n          if (isEmptyObject(error)) {\n            validFieldsRef.current.add(name);\n          } else {\n            isValidRef.current = false;\n          }\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultRenderValuesRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      defaultRenderValuesRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, currentField.ref) : defaultValue;\n    }\n\n    if (!type) {\n      return;\n    }\n\n    const fieldToAttachListener = isRadioOrCheckbox && currentField.options ? currentField.options[currentField.options.length - 1] : currentField;\n    attachEventListeners({\n      field: fieldToAttachListener,\n      isRadioOrCheckbox,\n      handleChange: handleChangeRef.current\n    });\n  }\n\n  function register(refOrValidationOptions, validationOptions) {\n    if (isWindowUndefined) {\n      return;\n    }\n\n    if (isString(refOrValidationOptions)) {\n      registerFieldsRef({\n        name: refOrValidationOptions\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n      registerFieldsRef(refOrValidationOptions, validationOptions);\n      return;\n    }\n\n    return ref => ref && registerFieldsRef(ref, refOrValidationOptions);\n  }\n\n  const handleSubmit = useCallback(callback => async e => {\n    if (e) {\n      e.preventDefault();\n      e.persist();\n    }\n\n    let fieldErrors = {};\n    let fieldValues = {};\n    const fields = fieldsRef.current;\n\n    if (readFormStateRef.current.isSubmitting) {\n      isSubmittingRef.current = true;\n      reRender();\n    }\n\n    try {\n      if (shouldValidateCallback) {\n        fieldValues = getFieldsValues(fields);\n        const {\n          errors,\n          values\n        } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\n        errorsRef.current = errors;\n        fieldErrors = errors;\n        fieldValues = values;\n      } else {\n        for (const field of Object.values(fields)) {\n          if (field) {\n            const {\n              ref,\n              ref: {\n                name\n              }\n            } = field;\n            const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\n\n            if (fieldError[name]) {\n              set(fieldErrors, name, fieldError[name]);\n              validFieldsRef.current.delete(name);\n            } else {\n              if (fieldsWithValidationRef.current.has(name)) {\n                validFieldsRef.current.add(name);\n              }\n\n              fieldValues[name] = getFieldValue(fields, ref);\n            }\n          }\n        }\n      }\n\n      if (isEmptyObject(fieldErrors)) {\n        errorsRef.current = {};\n        await callback(transformToNestObject(fieldValues), e);\n      } else {\n        if (submitFocusError && isWeb) {\n          focusErrorField(fields, fieldErrors);\n        }\n\n        errorsRef.current = fieldErrors;\n      }\n    } finally {\n      isSubmittedRef.current = true;\n      isSubmittingRef.current = false;\n      submitCountRef.current = submitCountRef.current + 1;\n      reRender();\n    }\n  }, [isWeb, reRender, shouldValidateCallback, submitFocusError, validateAllFieldCriteria, validationResolver, validationSchema]);\n\n  const resetRefs = ({\n    errors,\n    dirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount\n  }) => {\n    fieldsRef.current = {};\n\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!dirty) {\n      dirtyFieldsRef.current = new Set();\n      isDirtyRef.current = false;\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultRenderValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (values, omitResetState = {}) => {\n    if (isWeb) {\n      for (const value of Object.values(fieldsRef.current)) {\n        if (value && isHTMLElement(value.ref) && value.ref.closest) {\n          try {\n            value.ref.closest('form').reset();\n            break;\n          } catch (_a) {}\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\n    resetRefs(omitResetState);\n    reRender();\n  };\n\n  const getValues = payload => {\n    const fieldValues = getFieldsValues(fieldsRef.current);\n    const outputValues = isEmptyObject(fieldValues) ? defaultValuesRef.current : fieldValues;\n    return payload && payload.nest ? transformToNestObject(outputValues) : outputValues;\n  };\n\n  useEffect(() => () => {\n    isUnMount.current = true;\n    fieldsRef.current && process.env.NODE_ENV === 'production' && Object.values(fieldsRef.current).forEach(field => removeFieldEventListenerAndRef(field, true));\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!shouldValidateCallback) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirty: isDirtyRef.current,\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isValidRef.current\n  };\n  const control = Object.assign(Object.assign(Object.assign({\n    register,\n    unregister,\n    removeFieldEventListener,\n    getValues,\n    setValue,\n    reRender,\n    triggerValidation\n  }, shouldValidateCallback ? {\n    validateSchemaIsValid\n  } : {}), isWatchAllRef.current ? {} : {\n    watchFieldsRef\n  }), {\n    formState,\n    mode: {\n      isOnBlur,\n      isOnSubmit,\n      isOnChange\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    readFormStateRef,\n    defaultValuesRef\n  });\n  return {\n    watch,\n    control,\n    handleSubmit,\n    setValue: useCallback(setValue, [reRender, setInternalValue, triggerValidation]),\n    triggerValidation,\n    getValues: useCallback(getValues, []),\n    reset: useCallback(reset, []),\n    register: useCallback(register, [defaultValuesRef.current, defaultRenderValuesRef.current]),\n    unregister: useCallback(unregister, []),\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    errors: errorsRef.current,\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: (obj, prop) => {\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return {};\n      }\n    }) : formState\n  };\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nconst FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(_a) {\n  var {\n    children,\n    formState,\n    errors\n  } = _a,\n      restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\n\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restMethods), {\n      formState,\n      errors\n    })\n  }, children);\n}\n\nvar generateId = () => {\n  const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nconst appendId = (value, keyName) => Object.assign({\n  [keyName]: generateId()\n}, isObject(value) ? value : {\n  value\n});\n\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map(value => appendId(value, keyName));\n\nconst removeAt = (data, index) => [...data.slice(0, index), ...data.slice(index + 1)];\n\nfunction removeAtIndexes(data, index) {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return data.filter(Boolean);\n}\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : isArray(index) ? removeAtIndexes(data, index) : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (fields, indexA, indexB) => {\n  if (isArray(fields)) {\n    const temp = [fields[indexB], fields[indexA]];\n    fields[indexA] = temp[0];\n    fields[indexB] = temp[1];\n  }\n};\n\nvar prependAt = (data, value) => [...(isArray(value) ? value : [value || null]), ...data];\n\nvar insertAt = (data, index, value) => [...data.slice(0, index), ...(isArray(value) ? value : [value || null]), ...data.slice(index)];\n\nvar fillEmptyArray = value => isArray(value) ? Array(value.length).fill(null) : undefined;\n\nconst {\n  useEffect: useEffect$1,\n  useCallback: useCallback$1,\n  useRef: useRef$1,\n  useState: useState$1\n} = React;\n\nconst useFieldArray = ({\n  control,\n  name,\n  keyName = 'id'\n}) => {\n  const methods = useFormContext();\n  const {\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    getValues,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateSchemaIsValid\n  } = control || methods.control;\n  const memoizedDefaultValues = useRef$1(fieldArrayDefaultValues.current[name] || [...get(defaultValuesRef.current, name, [])]);\n  const isNameKey = isKey(name);\n  const [fields, setField] = useState$1(mapIds(memoizedDefaultValues.current, keyName));\n  const [isDeleted, setIsDeleted] = useState$1(false);\n  const allFields = useRef$1(fields);\n  allFields.current = fields;\n\n  if (isNameKey) {\n    fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\n  }\n\n  const appendValueWithKey = value => value.map(v => appendId(v, keyName));\n\n  const commonTasks = fieldsValues => {\n    setField(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateSchemaIsValid) {\n      validateSchemaIsValid({\n        [name]: fieldsValues\n      });\n    }\n  };\n\n  const resetFields = flagOrFields => {\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = isUndefined(flagOrFields) ? true : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name]);\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key], true);\n      }\n    }\n  };\n\n  const mapCurrentFieldsValueWithState = () => {\n    const currentFieldsValue = getValues({\n      nest: true\n    })[name];\n\n    if (isArray(currentFieldsValue)) {\n      for (let i = 0; i < currentFieldsValue.length; i++) {\n        allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\n      }\n    }\n  };\n\n  const append = value => {\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = true;\n      reRender();\n    }\n\n    commonTasks([...allFields.current, ...(isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)])]);\n  };\n\n  const prepend = value => {\n    resetFields();\n    commonTasks(prependAt(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = prependAt(errorsRef.current[name], fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(touchedFieldsRef.current[name], fillEmptyArray(value));\n      reRender();\n    }\n  };\n\n  const remove = index => {\n    let shouldRender = false;\n\n    if (!isUndefined(index)) {\n      mapCurrentFieldsValueWithState();\n    }\n\n    resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\n    commonTasks(removeArrayAt(allFields.current, index));\n    setIsDeleted(true);\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\n\n      if (!errorsRef.current[name].filter(Boolean).length) {\n        delete errorsRef.current[name];\n      }\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.dirty) {\n      dirtyFieldsRef.current.forEach(dirtyField => {\n        if (isUndefined(name) || dirtyField.startsWith(`${name}[${index}]`)) {\n          dirtyFieldsRef.current.delete(dirtyField);\n        }\n      });\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const currentFieldName = `${name}[${fieldIndex}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(currentFieldName);\n            fieldsWithValidationRef.current.delete(currentFieldName);\n          } else {\n            const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\n\n            if (validFieldsRef.current.has(currentFieldName)) {\n              validFieldsRef.current.add(previousFieldName);\n            }\n\n            if (fieldsWithValidationRef.current.has(currentFieldName)) {\n              fieldsWithValidationRef.current.add(previousFieldName);\n            }\n          }\n        }\n      }\n\n      shouldRender = true;\n    }\n\n    if (shouldRender) {\n      reRender();\n    }\n  };\n\n  const insert = (index, value) => {\n    mapCurrentFieldsValueWithState();\n    resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\n    commonTasks(insertAt(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = insertAt(errorsRef.current[name], index, fillEmptyArray(value));\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(touchedFieldsRef.current[name], index, fillEmptyArray(value));\n      reRender();\n    }\n  };\n\n  const swap = (indexA, indexB) => {\n    mapCurrentFieldsValueWithState();\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    swapArrayAt(allFields.current, indexA, indexB);\n    commonTasks([...allFields.current]);\n\n    if (errorsRef.current[name]) {\n      swapArrayAt(errorsRef.current[name], indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n      reRender();\n    }\n  };\n\n  const move = (from, to) => {\n    mapCurrentFieldsValueWithState();\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    moveArrayAt(allFields.current, from, to);\n    commonTasks([...allFields.current]);\n\n    if (errorsRef.current[name]) {\n      moveArrayAt(errorsRef.current[name], from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n      reRender();\n    }\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = get(defaultValuesRef.current, name, []);\n    setField(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  useEffect$1(() => {\n    if (isNameKey && isDeleted && fields.length < fieldArrayDefaultValues.current[name].length) {\n      fieldArrayDefaultValues.current[name].pop();\n    }\n  }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\n  useEffect$1(() => {\n    if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          break;\n        }\n      }\n    }\n\n    reRender();\n  }, [fields, name, reRender, watchFieldsRef]);\n  useEffect$1(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    swap: useCallback$1(swap, []),\n    move: useCallback$1(move, []),\n    prepend: useCallback$1(prepend, []),\n    append: useCallback$1(append, []),\n    remove: useCallback$1(remove, [fields]),\n    insert: useCallback$1(insert, []),\n    fields\n  };\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) || !isObject(event.target) || isObject(event.target) && !event.type ? event : isCheckboxInput || isUndefined(event.target.value) ? event.target.checked : event.target.value;\n\nconst Controller = _a => {\n  var {\n    name,\n    rules,\n    as: InnerComponent,\n    onBlur,\n    onChange,\n    onChangeName = VALIDATION_MODE.onChange,\n    onBlurName = VALIDATION_MODE.onBlur,\n    valueName,\n    defaultValue,\n    control,\n    onFocus\n  } = _a,\n      rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\n\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    errorsRef,\n    removeFieldEventListener,\n    triggerValidation,\n    mode: {\n      isOnSubmit,\n      isOnBlur,\n      isOnChange\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit\n    },\n    formState: {\n      isSubmitted\n    },\n    fieldsRef,\n    fieldArrayNamesRef\n  } = control || methods.control;\n  const [value, setInputStateValue] = useState$2(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue);\n  const valueRef = useRef$2(value);\n  const isCheckboxInput = isBoolean(value);\n\n  const shouldValidate = () => !skipValidation({\n    hasError: !!get(errorsRef.current, name),\n    isOnBlur,\n    isOnSubmit,\n    isOnChange,\n    isReValidateOnBlur,\n    isReValidateOnSubmit,\n    isSubmitted\n  });\n\n  const commonTask = event => {\n    const data = getInputValue(event, isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const eventWrapper = event => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\n\n  const handleChange = event => {\n    const data = commonTask(event);\n    setValue(name, data, shouldValidate());\n  };\n\n  const registerField = () => {\n    if (isNameInFieldArray(fieldArrayNamesRef.current, name) && fieldsRef.current[name]) {\n      removeFieldEventListener(fieldsRef.current[name], true);\n    }\n\n    register(Object.defineProperty({\n      name,\n      focus: onFocus\n    }, VALUE, {\n      set(data) {\n        setInputStateValue(data);\n        valueRef.current = data;\n      },\n\n      get() {\n        return valueRef.current;\n      }\n\n    }), Object.assign({}, rules));\n  };\n\n  useEffect$2(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      setInputStateValue(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue);\n    }\n  });\n  useEffect$2(() => {\n    registerField();\n    return () => {\n      if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        unregister(name);\n      }\n    };\n  }, [name]);\n  useEffect$2(() => {\n    registerField();\n  }, [rules]);\n  const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\n  const props = Object.assign(Object.assign(Object.assign(Object.assign({\n    name\n  }, rest), onChange ? {\n    [onChangeName]: eventWrapper(onChange)\n  } : {\n    [onChangeName]: handleChange\n  }), onBlur || shouldReValidateOnBlur ? {\n    [onBlurName]: (...args) => {\n      if (onBlur) {\n        onBlur(args);\n      }\n\n      if (shouldReValidateOnBlur) {\n        triggerValidation(name);\n      }\n    }\n  } : {}), {\n    [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value\n  });\n  return isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props);\n};\n\nconst ErrorMessage = _a => {\n  var {\n    as: InnerComponent,\n    errors,\n    name,\n    message,\n    children\n  } = _a,\n      rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\n\n  const methods = useFormContext();\n  const error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const {\n    message: messageFromRegister,\n    types\n  } = error;\n  const props = Object.assign(Object.assign({}, InnerComponent ? rest : {}), {\n    children: children ? children({\n      message: messageFromRegister || message,\n      messages: types\n    }) : messageFromRegister || message\n  });\n  return InnerComponent ? isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, props) : createElement(Fragment, Object.assign({}, props));\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };","map":{"version":3,"sources":["/Users/hazem/Desktop/Web-Development/GuestBook/frontend/node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["React","isValidElement","createContext","useContext","createElement","useState","useState$2","useRef","useRef$2","useEffect","useEffect$2","cloneElement","Fragment","isUndefined","val","undefined","isNullOrUndefined","value","isArray","Array","isObjectType","isObject","isHTMLElement","nodeType","Node","ELEMENT_NODE","VALIDATION_MODE","onBlur","onChange","onSubmit","VALUE","UNDEFINED","EVENTS","BLUR","CHANGE","INPUT","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","attachEventListeners","field","handleChange","isRadioOrCheckbox","ref","addEventListener","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","get","obj","defaultValue","split","filter","Boolean","focusErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","element","type","isCheckBoxInput","isDetached","HTMLElement","DOCUMENT_NODE","parentNode","isEmptyObject","keys","castPath","baseGet","updatePath","baseSlice","array","start","end","parent","baseUnset","childObject","previousObjRef","k","slice","objectRef","currentPaths","currentPathsLength","item","unset","paths","forEach","findRemovedFieldAndRemoveListener","forceDelete","name","mutationWatcher","fieldValue","disconnect","defaultReturn","isValid","getRadioValue","checked","getMultipleSelectValue","selected","map","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","attributes","getFieldValue","files","isString","getFieldsValues","search","output","isSearchString","isSearchArray","isNest","nest","startsWith","find","compareObject","objectA","objectB","objectAData","objectBData","isSameError","error","types","message","shouldUpdateWithError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isValueMessage","isFunction","isBoolean","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validationResult","validateFunction","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationResolver","context","abortEarly","e","getDefaultValue","defaultValues","flatArray","list","a","b","concat","isPrimitive","getPath","getInnerPath","pathWithIndex","getPath$1","parentPath","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","add","skipValidation","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","prev","isFileListObject","FileList","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","modeChecker","mode","useCallback","useForm","reValidateMode","validationContext","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultRenderValuesRef","defaultValuesRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","validationContextRef","fieldArrayNamesRef","render","isWindowUndefined","shouldValidateCallback","isWeb","isProxyEnabled","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","shouldRenderBaseOnError","shouldRender","skipReRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldArray","previousDirtyFieldsLength","size","isDirty","fieldArrayName","substring","indexOf","isDirtyChanged","setDirtyAndTouchedFields","setInternalValueBatch","parentFieldName","isValueArray","setInternalValue","executeValidation","executeSchemaValidation","payload","previousFormIsValid","triggerValidation","Promise","all","every","isFieldWatched","setValue","valueOrShouldValidate","shouldValidate","isMultiple","isStringFieldName","target","currentError","shouldSkipValidation","shouldUpdateDirty","shouldUpdateState","validateSchemaIsValid","then","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","preventRender","setError","watch","fieldNames","unregister","registerFieldsRef","validateOptions","console","warn","fieldAttributes","currentField","isEmptyDefaultValue","fieldToAttachListener","register","refOrValidationOptions","validationOptions","handleSubmit","callback","preventDefault","persist","fieldError","resetRefs","reset","omitResetState","closest","_a","resetFieldArray","getValues","outputValues","process","env","NODE_ENV","formState","control","Proxy","prop","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","FormGlobalContext","useFormContext","FormContext","children","restMethods","Provider","generateId","d","performance","now","c","r","Math","random","appendId","keyName","mapIds","removeAt","removeAtIndexes","removeArrayAt","moveArrayAt","from","to","splice","swapArrayAt","indexA","indexB","temp","prependAt","insertAt","fillEmptyArray","fill","useEffect$1","useCallback$1","useRef$1","useState$1","useFieldArray","methods","memoizedDefaultValues","isNameKey","setField","isDeleted","setIsDeleted","allFields","appendValueWithKey","v","commonTasks","fieldsValues","resetFields","flagOrFields","mapCurrentFieldsValueWithState","currentFieldsValue","append","prepend","remove","dirtyField","fieldIndex","isFound","isIndexUndefined","isLast","isCurrentIndex","currentFieldName","previousFieldName","insert","swap","move","pop","watchField","resetFunctions","fieldArrayNames","getInputValue","event","isCheckboxInput","Controller","rules","as","InnerComponent","onChangeName","onBlurName","valueName","onFocus","rest","setInputStateValue","valueRef","commonTask","eventWrapper","arg","registerField","defineProperty","shouldReValidateOnBlur","props","args","ErrorMessage","messageFromRegister","messages"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { isValidElement, createContext, useContext, createElement, useState as useState$2, useRef as useRef$2, useEffect as useEffect$2, cloneElement, Fragment } from 'react';\n\nvar isUndefined = (val) => val === undefined;\n\nvar isNullOrUndefined = (value) => value === null || isUndefined(value);\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({ field, handleChange, isRadioOrCheckbox, }) {\r\n    const { ref } = field;\r\n    if (isHTMLElement(ref) && ref.addEventListener && handleChange) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!isKey(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? obj[path] || defaultValue\r\n        : result;\r\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (element) => !!element && element.type === 'radio';\n\nvar isCheckBoxInput = (element) => !!element && element.type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\r\n    return isArray(value) ? value : stringToPath(value);\r\n}\r\nfunction baseGet(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return index == length ? object : undefined;\r\n}\r\nfunction baseSlice(array, start, end) {\r\n    let index = -1;\r\n    let length = array.length;\r\n    if (start < 0) {\r\n        start = -start > length ? 0 : length + start;\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end += length;\r\n    }\r\n    length = start > end ? 0 : end - start;\r\n    const result = Array(length);\r\n    while (++index < length) {\r\n        result[index] = array[index + start];\r\n    }\r\n    return result;\r\n}\r\nfunction parent(object, path) {\r\n    return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n}\r\nfunction baseUnset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const childObject = parent(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    const result = !(childObject != null) || delete childObject[key];\r\n    let previousObjRef = undefined;\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef = undefined;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index) {\r\n                if (isObject(objectRef) && isEmptyObject(objectRef)) {\r\n                    previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n                }\r\n                else if (isArray(objectRef) &&\r\n                    !objectRef.filter(data => isObject(data) && !isEmptyObject(data))\r\n                        .length) {\r\n                    if (previousObjRef) {\r\n                        delete previousObjRef[item];\r\n                    }\r\n                }\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction unset(object, paths) {\r\n    paths.forEach(path => {\r\n        baseUnset(object, path);\r\n    });\r\n    return object;\r\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    if (!field) {\r\n        return;\r\n    }\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    const fieldValue = fields[name];\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options\r\n                .filter(Boolean)\r\n                .forEach(({ ref, mutationWatcher }, index) => {\r\n                if ((ref && isDetached(ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    unset(options, [`[${index}]`]);\r\n                }\r\n            });\r\n            if (options && !options.filter(Boolean).length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if (isDetached(ref) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.filter(Boolean).reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (element) => !!element && element.type === 'file';\n\nvar isMultipleSelect = (element) => !!element && element.type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter(({ ref: { checked } }) => checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { name, value } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return getMultipleSelectValue(ref.options);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    const isSearchString = isString(search);\r\n    const isSearchArray = isArray(search);\r\n    const isNest = search && search.nest;\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            isNest ||\r\n            (isSearchString && name.startsWith(search)) ||\r\n            (isSearchArray &&\r\n                search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => {\r\n    const objectAData = Object.entries(objectA);\r\n    const objectBData = Object.keys(objectB);\r\n    return (objectAData.length === objectBData.length &&\r\n        objectAData.reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true));\r\n};\n\nvar isSameError = (error, { type, types, message, }) => {\r\n    return (isObject(error) &&\r\n        error.type === type &&\r\n        error.message === message &&\r\n        compareObject(error.types, types));\r\n};\n\nfunction shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isValueMessage = (value) => isObject(value) && !isRegex(value);\r\n    return isValueMessage(validationData)\r\n        ? validationData\r\n        : {\r\n            value: validationData,\r\n            message: '',\r\n        };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isMessage = (value) => isString(value) || (isObject(value) && isValidElement(value));\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        const message = isMessage(result) ? result : '';\r\n        return {\r\n            type,\r\n            message,\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (!validateAllFieldCriteria) {\r\n        return {};\r\n    }\r\n    const error = errors[name];\r\n    return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value: requiredValue, message: requiredMessage } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (requiredValue) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\r\n        const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria\r\n        ? {\r\n            [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n        }\r\n        : {\r\n            [path]: previous[path] || Object.assign({ message,\r\n                type }, (validateAllFieldCriteria\r\n                ? {\r\n                    types: { [type]: message || true },\r\n                }\r\n                : {})),\r\n        }))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\r\n    if (validationResolver) {\r\n        return validationResolver(data, context);\r\n    }\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, {\r\n                abortEarly: false,\r\n                context,\r\n            }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name])\r\n    ? get(defaultValues, name, defaultValue)\r\n    : defaultValues[name];\n\nfunction flatArray(list) {\r\n    return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        value = fieldValues[fieldName];\r\n        watchFields.add(fieldName);\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach(name => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isObject(combinedDefaultValues)\r\n            ? getDefaultValue(combinedDefaultValues, fieldName)\r\n            : combinedDefaultValues\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnChange, hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnChange && isBlurEvent) ||\r\n    (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (isUndefined(dataB) ||\r\n            Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\r\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName(name, current) ? true : prev), false);\n\nvar isFileListObject = (data) => typeof FileList !== UNDEFINED && data instanceof FileList;\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nconst { useRef, useState, useCallback, useEffect } = React;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const fieldArrayDefaultValues = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultRenderValuesRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const validationContextRef = useRef(validationContext);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit, isOnChange } = useRef(modeChecker(mode)).current;\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const shouldValidateCallback = !!(validationSchema || validationResolver);\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb && 'Proxy' in window;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldUpdateWithError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) ||\r\n                shouldValidateCallback) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !get(errorsRef.current, name);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !skipReRender) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, shouldValidateCallback]);\r\n    const setFieldValue = useCallback((field, rawValue) => {\r\n        const ref = field.ref;\r\n        const options = field.options;\r\n        const { type } = ref;\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref)) {\r\n            if (isEmptyString(value) ||\r\n                isFileListObject(value)) {\r\n                ref.files = value;\r\n            }\r\n            else {\r\n                ref.value = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach(selectRef => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n        return !!type;\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        let isDirty = defaultRenderValuesRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        if (isFieldArray) {\r\n            const fieldArrayName = name.substring(0, name.indexOf('['));\r\n            isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isDirty;\r\n        if (isDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    };\r\n    const setDirtyAndTouchedFields = useCallback((fieldName) => {\r\n        if (setDirty(fieldName) ||\r\n            (!get(touchedFieldsRef.current, fieldName) &&\r\n                readFormStateRef.current.touched)) {\r\n            return !!set(touchedFieldsRef.current, fieldName, true);\r\n        }\r\n    }, []);\r\n    const setInternalValueBatch = useCallback((name, value, parentFieldName) => {\r\n        const isValueArray = isArray(value);\r\n        for (const key in value) {\r\n            const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\r\n            if (isObject(value[key])) {\r\n                setInternalValueBatch(name, value[key], fieldName);\r\n            }\r\n            const field = fieldsRef.current[fieldName];\r\n            if (field) {\r\n                setFieldValue(field, value[key]);\r\n                setDirtyAndTouchedFields(fieldName);\r\n            }\r\n        }\r\n    }, [setFieldValue, setDirtyAndTouchedFields]);\r\n    const setInternalValue = useCallback((name, value) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            setFieldValue(field, value);\r\n            const output = setDirtyAndTouchedFields(name);\r\n            if (isBoolean(output)) {\r\n                return output;\r\n            }\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValueBatch(name, value);\r\n        }\r\n    }, [setDirtyAndTouchedFields, setFieldValue, setInternalValueBatch]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n        shouldRenderBaseOnError(name, error, false, skipReRender);\r\n        return isEmptyObject(error);\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach(name => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            shouldRenderBaseOnError(payload, (get(errors, payload)\r\n                ? { [payload]: get(errors, payload) }\r\n                : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (shouldValidateCallback) {\r\n            return executeSchemaValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [\r\n        executeSchemaValidation,\r\n        executeValidation,\r\n        reRender,\r\n        shouldValidateCallback,\r\n    ]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    function setValue(names, valueOrShouldValidate, shouldValidate) {\r\n        let shouldRender = false;\r\n        const isMultiple = isArray(names);\r\n        (isMultiple\r\n            ? names\r\n            : [names]).forEach((name) => {\r\n            const isStringFieldName = isString(name);\r\n            shouldRender =\r\n                setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName\r\n                    ? valueOrShouldValidate\r\n                    : Object.values(name)[0]) || isMultiple\r\n                    ? true\r\n                    : isFieldWatched(name);\r\n        });\r\n        if (shouldRender || isMultiple) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate || (isMultiple && valueOrShouldValidate)) {\r\n            triggerValidation(isMultiple ? undefined : names);\r\n        }\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isOnChange,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldUpdateState = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldUpdateState && reRender();\r\n            }\r\n            if (shouldValidateCallback) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldUpdateState = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaIsValid = useCallback((values = {}) => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [reRender, validateAllFieldCriteria, validationResolver]);\r\n    const removeFieldEventListener = (field, forceDelete) => {\r\n        if (!isUndefined(handleChangeRef.current) && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    };\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        const { name } = field.ref;\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [\r\n            name,\r\n        ]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach(data => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n            if (shouldValidateCallback) {\r\n                validateSchemaIsValid();\r\n            }\r\n        }\r\n    }, [reRender, shouldValidateCallback, validateSchemaIsValid]);\r\n    function clearError(name) {\r\n        if (isUndefined(name)) {\r\n            errorsRef.current = {};\r\n        }\r\n        else {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, preventRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errorsRef.current[name], {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (!preventRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const combinedDefaultValues = isDirtyRef.current\r\n            ? {}\r\n            : isUndefined(defaultValue)\r\n                ? isUndefined(defaultValuesRef.current)\r\n                    ? {}\r\n                    : defaultValuesRef.current\r\n                : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        const watchFields = watchFieldsRef.current;\r\n        if (!isEmptyObject(combinedDefaultValues)) {\r\n            readFormStateRef.current.dirty = true;\r\n        }\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) || combinedDefaultValues;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(names) {\r\n        if (!isEmptyObject(fieldsRef.current)) {\r\n            (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldAttributes = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioInput(ref) || isCheckBoxInput(ref);\r\n        let currentField = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray = false;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? currentField &&\r\n                isArray(currentField.options) &&\r\n                currentField.options\r\n                    .filter(Boolean)\r\n                    .find(({ ref }) => value === ref.value)\r\n            : currentField) {\r\n            fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\r\n            currentField = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((currentField && currentField.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });\r\n        }\r\n        else {\r\n            currentField = fieldAttributes;\r\n        }\r\n        fields[name] = currentField;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = getDefaultValue(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(currentField, defaultValue);\r\n            }\r\n        }\r\n        if (shouldValidateCallback &&\r\n            !isFieldArray &&\r\n            readFormStateRef.current.isValid) {\r\n            validateSchemaIsValid();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    if (isEmptyObject(error)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    else {\r\n                        isValidRef.current = false;\r\n                    }\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultRenderValuesRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultRenderValuesRef.current[name] = isEmptyDefaultValue\r\n                ? getFieldValue(fields, currentField.ref)\r\n                : defaultValue;\r\n        }\r\n        if (!type) {\r\n            return;\r\n        }\r\n        const fieldToAttachListener = isRadioOrCheckbox && currentField.options\r\n            ? currentField.options[currentField.options.length - 1]\r\n            : currentField;\r\n        attachEventListeners({\r\n            field: fieldToAttachListener,\r\n            isRadioOrCheckbox,\r\n            handleChange: handleChangeRef.current,\r\n        });\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        let fieldValues = {};\r\n        const fields = fieldsRef.current;\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (shouldValidateCallback) {\r\n                fieldValues = getFieldsValues(fields);\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fields)) {\r\n                    if (field) {\r\n                        const { ref, ref: { name }, } = field;\r\n                        const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            validFieldsRef.current.delete(name);\r\n                        }\r\n                        else {\r\n                            if (fieldsWithValidationRef.current.has(name)) {\r\n                                validFieldsRef.current.add(name);\r\n                            }\r\n                            fieldValues[name] = getFieldValue(fields, ref);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                if (submitFocusError && isWeb) {\r\n                    focusErrorField(fields, fieldErrors);\r\n                }\r\n                errorsRef.current = fieldErrors;\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        isWeb,\r\n        reRender,\r\n        shouldValidateCallback,\r\n        submitFocusError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = ({ errors, dirty, isSubmitted, touched, isValid, submitCount, }) => {\r\n        fieldsRef.current = {};\r\n        if (!errors) {\r\n            errorsRef.current = {};\r\n        }\r\n        if (!touched) {\r\n            touchedFieldsRef.current = {};\r\n        }\r\n        if (!isValid) {\r\n            validFieldsRef.current = new Set();\r\n            fieldsWithValidationRef.current = new Set();\r\n            isValidRef.current = true;\r\n        }\r\n        if (!dirty) {\r\n            dirtyFieldsRef.current = new Set();\r\n            isDirtyRef.current = false;\r\n        }\r\n        if (!isSubmitted) {\r\n            isSubmittedRef.current = false;\r\n        }\r\n        if (!submitCount) {\r\n            submitCountRef.current = 0;\r\n        }\r\n        defaultRenderValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const value of Object.values(fieldsRef.current)) {\r\n                if (value && isHTMLElement(value.ref) && value.ref.closest) {\r\n                    try {\r\n                        value.ref.closest('form').reset();\r\n                        break;\r\n                    }\r\n                    catch (_a) { }\r\n                }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs(omitResetState);\r\n        reRender();\r\n    };\r\n    const getValues = (payload) => {\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    };\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            process.env.NODE_ENV === 'production' &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!shouldValidateCallback) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isValidRef.current,\r\n    };\r\n    const control = Object.assign(Object.assign(Object.assign({ register,\r\n        unregister,\r\n        removeFieldEventListener,\r\n        getValues,\r\n        setValue,\r\n        reRender,\r\n        triggerValidation }, (shouldValidateCallback ? { validateSchemaIsValid } : {})), (isWatchAllRef.current ? {} : { watchFieldsRef })), { formState, mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n            isOnChange,\r\n        }, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        }, errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        fieldArrayDefaultValues,\r\n        validFieldsRef,\r\n        dirtyFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef });\r\n    return {\r\n        watch,\r\n        control,\r\n        handleSubmit,\r\n        setValue: useCallback(setValue, [\r\n            reRender,\r\n            setInternalValue,\r\n            triggerValidation,\r\n        ]),\r\n        triggerValidation,\r\n        getValues: useCallback(getValues, []),\r\n        reset: useCallback(reset, []),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultRenderValuesRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        clearError: useCallback(clearError, []),\r\n        setError: useCallback(setError, []),\r\n        errors: errorsRef.current,\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value, keyName) => (Object.assign({ [keyName]: generateId() }, (isObject(value) ? value : { value })));\r\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map(value => appendId(value, keyName));\n\nconst removeAt = (data, index) => [\r\n    ...data.slice(0, index),\r\n    ...data.slice(index + 1),\r\n];\r\nfunction removeAtIndexes(data, index) {\r\n    let k = -1;\r\n    while (++k < data.length) {\r\n        if (index.indexOf(k) >= 0) {\r\n            delete data[k];\r\n        }\r\n    }\r\n    return data.filter(Boolean);\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : isArray(index)\r\n        ? removeAtIndexes(data, index)\r\n        : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (fields, indexA, indexB) => {\r\n    if (isArray(fields)) {\r\n        const temp = [fields[indexB], fields[indexA]];\r\n        fields[indexA] = temp[0];\r\n        fields[indexB] = temp[1];\r\n    }\r\n};\n\nvar prependAt = (data, value) => [\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data,\r\n];\n\nvar insertAt = (data, index, value) => [\r\n    ...data.slice(0, index),\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data.slice(index),\r\n];\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : undefined;\n\nconst { useEffect: useEffect$1, useCallback: useCallback$1, useRef: useRef$1, useState: useState$1 } = React;\r\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    const { resetFieldArrayFunctionRef, fieldArrayNamesRef, reRender, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, dirtyFieldsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldsRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValues, validateSchemaIsValid, } = control || methods.control;\r\n    const memoizedDefaultValues = useRef$1(fieldArrayDefaultValues.current[name] || [\r\n        ...get(defaultValuesRef.current, name, []),\r\n    ]);\r\n    const isNameKey = isKey(name);\r\n    const [fields, setField] = useState$1(mapIds(memoizedDefaultValues.current, keyName));\r\n    const [isDeleted, setIsDeleted] = useState$1(false);\r\n    const allFields = useRef$1(fields);\r\n    allFields.current = fields;\r\n    if (isNameKey) {\r\n        fieldArrayDefaultValues.current[name] = memoizedDefaultValues.current;\r\n    }\r\n    const appendValueWithKey = (value) => value.map((v) => appendId(v, keyName));\r\n    const commonTasks = (fieldsValues) => {\r\n        setField(fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateSchemaIsValid) {\r\n            validateSchemaIsValid({\r\n                [name]: fieldsValues,\r\n            });\r\n        }\r\n    };\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, defaultValuesRef.current[name]);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = getValues({ nest: true })[name];\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                allFields.current[i] = Object.assign(Object.assign({}, allFields.current[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = true;\r\n            reRender();\r\n        }\r\n        commonTasks([\r\n            ...allFields.current,\r\n            ...(isArray(value)\r\n                ? appendValueWithKey(value)\r\n                : [appendId(value, keyName)]),\r\n        ]);\r\n    };\r\n    const prepend = (value) => {\r\n        resetFields();\r\n        commonTasks(prependAt(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prependAt(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prependAt(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n            reRender();\r\n        }\r\n    };\r\n    const remove = (index) => {\r\n        let shouldRender = false;\r\n        if (!isUndefined(index)) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        commonTasks(removeArrayAt(allFields.current, index));\r\n        setIsDeleted(true);\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n            if (!errorsRef.current[name].filter(Boolean).length) {\r\n                delete errorsRef.current[name];\r\n            }\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n            shouldRender = true;\r\n        }\r\n        if (readFormStateRef.current.dirty) {\r\n            dirtyFieldsRef.current.forEach(dirtyField => {\r\n                if (isUndefined(name) || dirtyField.startsWith(`${name}[${index}]`)) {\r\n                    dirtyFieldsRef.current.delete(dirtyField);\r\n                }\r\n            });\r\n            shouldRender = true;\r\n        }\r\n        if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\r\n            let fieldIndex = -1;\r\n            let isFound = false;\r\n            const isIndexUndefined = isUndefined(index);\r\n            while (fieldIndex++ < fields.length) {\r\n                const isLast = fieldIndex === fields.length - 1;\r\n                const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\r\n                if (isCurrentIndex || isIndexUndefined) {\r\n                    isFound = true;\r\n                }\r\n                if (!isFound) {\r\n                    continue;\r\n                }\r\n                for (const key in fields[fieldIndex]) {\r\n                    const currentFieldName = `${name}[${fieldIndex}].${key}`;\r\n                    if (isCurrentIndex || isLast || isIndexUndefined) {\r\n                        validFieldsRef.current.delete(currentFieldName);\r\n                        fieldsWithValidationRef.current.delete(currentFieldName);\r\n                    }\r\n                    else {\r\n                        const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\r\n                        if (validFieldsRef.current.has(currentFieldName)) {\r\n                            validFieldsRef.current.add(previousFieldName);\r\n                        }\r\n                        if (fieldsWithValidationRef.current.has(currentFieldName)) {\r\n                            fieldsWithValidationRef.current.add(previousFieldName);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            shouldRender = true;\r\n        }\r\n        if (shouldRender) {\r\n            reRender();\r\n        }\r\n    };\r\n    const insert = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        commonTasks(insertAt(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insertAt(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insertAt(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n            reRender();\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(allFields.current, indexA, indexB);\r\n        commonTasks([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n            reRender();\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(allFields.current, from, to);\r\n        commonTasks([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n            reRender();\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = get(defaultValuesRef.current, name, []);\r\n        setField(mapIds(memoizedDefaultValues.current, keyName));\r\n    };\r\n    useEffect$1(() => {\r\n        if (isNameKey &&\r\n            isDeleted &&\r\n            fields.length < fieldArrayDefaultValues.current[name].length) {\r\n            fieldArrayDefaultValues.current[name].pop();\r\n        }\r\n    }, [fields, name, fieldArrayDefaultValues, isDeleted, isNameKey]);\r\n    useEffect$1(() => {\r\n        if (watchFieldsRef) {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    reRender();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        reRender();\r\n    }, [fields, name, reRender, watchFieldsRef]);\r\n    useEffect$1(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return {\r\n        swap: useCallback$1(swap, []),\r\n        move: useCallback$1(move, []),\r\n        prepend: useCallback$1(prepend, []),\r\n        append: useCallback$1(append, []),\r\n        remove: useCallback$1(remove, [fields]),\r\n        insert: useCallback$1(insert, []),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isCheckboxInput || isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control, onFocus } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur, isOnChange }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState$2(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef$2(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isOnChange,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (event) => {\r\n        const data = getInputValue(event, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (event) => {\r\n        const data = commonTask(event);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = () => {\r\n        if (isNameInFieldArray(fieldArrayNamesRef.current, name) &&\r\n            fieldsRef.current[name]) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({ name, focus: onFocus }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), Object.assign({}, rules));\r\n    };\r\n    useEffect$2(() => {\r\n        if (!fieldsRef.current[name]) {\r\n            registerField();\r\n            setInputStateValue(isUndefined(defaultValue)\r\n                ? get(defaultValuesRef.current, name)\r\n                : defaultValue);\r\n        }\r\n    });\r\n    useEffect$2(() => {\r\n        registerField();\r\n        return () => {\r\n            if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\r\n                unregister(name);\r\n            }\r\n        };\r\n    }, [name]);\r\n    useEffect$2(() => {\r\n        registerField();\r\n    }, [rules]);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), (onBlur || shouldReValidateOnBlur\r\n        ? {\r\n            [onBlurName]: (...args) => {\r\n                if (onBlur) {\r\n                    onBlur(args);\r\n                }\r\n                if (shouldReValidateOnBlur) {\r\n                    triggerValidation(name);\r\n                }\r\n            },\r\n        }\r\n        : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent)\r\n        ? cloneElement(InnerComponent, props)\r\n        : createElement(InnerComponent, props);\r\n};\n\nconst ErrorMessage = (_a) => {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"]},"metadata":{},"sourceType":"module"}